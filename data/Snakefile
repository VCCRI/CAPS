from snakemake.remote.GS import RemoteProvider

GS = RemoteProvider(stay_on_remote=True)

###############################################################################
#                                  Main files                                 #
###############################################################################

mutation_ht = GS.remote(config["gcp_rootdir"] + "mutation_ht.tsv")
all_by_csq_genomes = GS.remote(config["gcp_rootdir"] + "by_csq_genomes.tsv")
all_by_csq = GS.remote(config["gcp_rootdir"] + "by_csq.tsv")

###############################################################################


rule all:
    input:
        mutation_ht,
        # Genomes #############################################################
        all_by_csq_genomes,
        # Exomes ##############################################################
        all_by_csq,


rule mutation_ht:
    output:
        mutation_ht,
    run:
        import hail as hl

        mutation_ht = hl.read_table(config["mutation_rates_ht_path"])
        mutation_ht.export(output[0])


# Counts of singletons in all variants grouped by
# variant class and context (exomes)
rule all_by_csq:
    output:
        all_by_csq,
    run:
        import hail as hl
        from preprocessing import preprocessing

        variants = preprocessing(
            config["exomes_ht_path"],
            config["context_ht_path"],
            config["mutation_rates_ht_path"],
            config["coverage_exomes_ht_path"],
            {"female": config["female_exomes"], "male": config["male_exomes"]},
        )

        variants.group_by(
            "context",
            "ref",
            "alt",
            "mu",
            "methylation_level",
            "worst_csq",
            "protein_coding",
            "coverage",
        ).aggregate(
            variant_count=hl.agg.count(),
            singleton_count=hl.agg.count_where(variants.freq[0].AC == 1),
        ).export(
            output[0]
        )


# Counts of singletons in all variants grouped by
# variant class and context (genomes)
rule all_by_csq_genomes:
    output:
        all_by_csq_genomes,
    run:
        import hail as hl
        from preprocessing import preprocessing

        variants = preprocessing(
            config["genomes_ht_path"],
            config["context_ht_path"],
            config["mutation_rates_ht_path"],
            config["coverage_genomes_ht_path"],
            {"female": config["female_genomes"], "male": config["male_genomes"]},
        )
        variants.group_by(
            "context",
            "ref",
            "alt",
            "mu",
            "methylation_level",
            "protein_coding",
            "worst_csq",
            "coverage",
        ).aggregate(
            variant_count=hl.agg.count(),
            singleton_count=hl.agg.count_where(variants.freq[0].AC == 1),
        ).export(
            output[0]
        )
